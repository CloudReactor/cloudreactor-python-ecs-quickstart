# This pre-build step copies an environment-specific dotenv file
# for tasks to read. Copying with ansible has the advantage that
# files encrypted with ansible-vault will be decrypted.
# If your task does not use dotenv, you can remove these steps.
---
- name: Ensures docker_context/build dir exists
  file: path={{docker_context_dir}}/build state=directory
  tags:
    - build

- name: Check if runtime .env file exists
  stat:
    path: "{{deploy_config_dir}}/files/.env.{{env}}"
  register: dotenv_file_result
  tags:
    - build

- name: Output message if .env does not exist
  debug:
    msg: "{{deploy_config_dir}}/files/.env.{{env}} does not exist, creating an empty file"
    verbosity: 1
  when: not dotenv_file_result.stat.exists

- name: Create an empty .env file if it does not exist
  file:
    path: "{{deploy_config_dir}}/build/.env"
    state: touch
  when: not dotenv_file_result.stat.exists

- name: Copy runtime .env file read by application if it exists
  copy: |
    src={{deploy_config_dir}}/files/.env.{{env}}
    dest={{docker_context_dir}}/build/.env
  tags:
    - build
  when: dotenv_file_result.stat.exists

# Uncomment to upload your locally encrypted file to Secrets Manager
# each time you deploy:
# - name: Upload .env file to AWS Secrets Manager
#   community.aws.aws_secret:
#     name: 'myorg/{{project_name}}/secrets/{{env}}/env'
#     state: present
#     secret_type: 'string'
#     secret: "{{ lookup('file', deploy_config_dir + '/files/.env.' + env)  }}"
#   register: create_dotenv_secret_result

# - debug:
#     msg: "Secret: {{create_dotenv_secret_result}}"
